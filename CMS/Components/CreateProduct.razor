@page "/product/create"

<EditForm Model="_model" OnValidSubmit="Submit" OnInvalidSubmit="Invalid">
    <DataAnnotationsValidator />
    <MudGrid Class="ma-2 pa-2">
        <MudItem xs="6">
            <MudTextField @bind-Value="_model.Name" For="@(() => _model.Name)" Label="Name" Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="_model.Discount" For="@(() => _model.Discount)" Label="Discount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="%"></MudTextField>
            <MudTextField @bind-Value="_model.InStock" For="@(() => _model.InStock)" Label="In Stock" Variant="Variant.Outlined"></MudTextField>
            <MudSelect @bind-Value="_model.CategoryId" For="() => _model.CategoryId" T="int?" Label="Category" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Required="true">
                @if (_categories is not null)
                {
                    foreach (var category in _categories)
                    {
                        <MudSelectItem T="int?" Value="category.Id">@category.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudDivider Class="ma-4" />
            <MudSimpleTable Style="@(_priceError ? "overflow-x: auto;border: 1px solid var(--mud-palette-error-darken);" : "overflow-x: auto;" )" Outlined="true" @ref="_element">
                <thead>
                    <tr>
                        <th>Price</th>
                        <th>Currency</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var price in _model.Prices)
                    {
                        <tr>
                            <td>@price.Value</td>
                            <td>@price.Currency?.ISO4217</td>
                            <td>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemovePriceFromProduct(price)" />
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <MudTextField @bind-Value="@_price.Value" Label="Price" Variant="Variant.Text" Required="true"></MudTextField>

                        </td>
                        <td>
                            @if (_currencies is not null)
                            {
                                <MudSelect @bind-Value="@_price.Currency" T="CurrencyVM" Label="Currency" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Required="true">
                                    @foreach (var currency in _currencies)
                                    {
                                        <MudSelectItem T="CurrencyVM" Value="@currency">
                                            @currency.ISO4217
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </td>
                        <td>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" OnClick="AddPriceToProduct" />
                        </td>
                    </tr>
                </tbody>
            </MudSimpleTable>
            @if (_priceError)
            {
                <div class="mud-input-control-helper-container px-2" style="color:var(--mud-palette-error)">
                    <p class="mud-input-helper-text mud-input-error">
                        <div class="d-flex">
                            <div class="me-auto">@_priceErrorMessage</div>
                        </div>
                    </p>
                </div>
            }
        </MudItem>
        <MudItem xs="6">
            <MudSelect @bind-Value="@_model.SelectedSpecification" T="string" For="@(() => _model.SelectedSpecification)" Label="Specifications Type" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Required="true">
                @foreach (var specification in _model.Specifications)
                {
                    <MudSelectItem T="string" Value="@specification">
                        @specification
                    </MudSelectItem>
                }
            </MudSelect>
            @if (_model.SelectedSpecification is not null)
            {
                <ProductAttributes Specification="@_model.SelectedSpecification" @ref="_productAttributes" />
            }
        </MudItem>
        <MudItem xs="12">
            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".jpg,.jpeg,.png,.tiff,.tif,.bmp" />

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       Class="ma-4"
                       for="fileInput">
                Upload Files
            </MudButton>
            @if (_files is not null)
            {
            <MudGrid>
                @foreach (var file in _files)
                {
                    <MudItem xs="3" Style="display:flex;">
                        <MudStack Justify="Justify.SpaceBetween">
                            <MudTooltip Placement="Placement.Top" Inline="true" Text="Set as main image">
                                <MudBadge Overlap="true" Class="mx-6 my-4" Color="@(file.Value.MainImage ? Color.Success : Color.Transparent)" Icon="@(file.Value.MainImage ? Icons.Filled.CheckBox : Icons.Filled.CheckBoxOutlineBlank)">
                                        <MudImage Src="@file.Value.ImageDataUrl" Alt="@file.Key.Name" ObjectFit="ObjectFit.ScaleDown" Fluid="true" @onclick="() => SetAsMain(file.Value)" Style="cursor:pointer" />
                                </MudBadge>
                            </MudTooltip>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="() => _files.Remove(file)" />
                        </MudStack>
                    </MudItem>
                }
            </MudGrid>
            }
        </MudItem>
        <MudItem xs="12">
            <MudButton Class="ma-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" IconColor="Color.Info" Size="Size.Large" OnClick="Cancel">Cancel</MudButton>
            <MudButton Class="ma-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Success" Size="Size.Large" ButtonType="ButtonType.Submit">Save</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    [CascadingParameter]
    MudDialogInstance _mudDialog { get; set; } = null!;
    [Inject]
    IApiService _apiService { get; set; } = null!;
    ProductForCreationVM _model = new();
    List<CategoryVM> _categories { get; set; } = null!;
    IDictionary<IBrowserFile, ImageVM> _files = new Dictionary<IBrowserFile, ImageVM>();
    IEnumerable<CurrencyVM> _currencies = new List<CurrencyVM>();
    PriceVM _price = new();
    ProductAttributes.ProductAttributes? _productAttributes;
    MudSimpleTable? _element;
    bool _priceError = false;
    string _priceErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        _categories = await _apiService.GetCategories();
        _currencies = await _apiService.GetCurrencies();
    }

    async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            _files.Add(file, new ImageVM { ImageDataUrl = await file.ToImageDataURL() });
        }
        //TODO upload the files to the server
    }

    void AddPriceToProduct()
    {
        if (_price.Value is null || _price.Currency is null)
        {
            _priceErrorMessage = "Please fill up the fields";
            _priceError = true;

            return;
        }

        _model.Prices.Add(_price);
        _price = new();
        _priceError = false;
    }

    void RemovePriceFromProduct(PriceVM price)
    {
        _model.Prices.Remove(price);
    }

    void Submit()
    {
        if (_model.Prices.Count <= 0)
        {
            _priceErrorMessage = "Product must containt at least one price";
            _priceError = true;

            return;
        }
        _mudDialog.Close(DialogResult.Ok(_model));
        _priceError = false;
    }
    void Cancel() => _mudDialog.Cancel();

    void Invalid()
    {
        if (_model.Prices.Count <= 0)
        {
            _priceErrorMessage = "Product must containt at least one price";
            _priceError = true;
        }
        _productAttributes?._editForm?.EditContext?.Validate();
    }

    void SetAsMain(ImageVM image)
    { 
        foreach (var file in _files)
        {
            file.Value.MainImage = false;
        }

        image.MainImage = true;
    }
}