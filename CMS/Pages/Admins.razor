@page "/admin"

<MudTable Items="@_admins" FixedHeader="true" Hover="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" Class="d-flex flex-grow-1 gap-4"
          OnCommitEditClick="@(async () => await UpdateAdmin())" IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End" Loading="@_loader" @bind-SelectedItem="_selectedItem">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Action">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="async () => await ShowDeleteMessageBox(context)" Class="ma-2">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">
            <MudTextField @bind-Value="@context.FirstName" />
        </MudTd>
        <MudTd DataLabel="LastName">
            <MudTextField @bind-Value="@context.LastName" />
        </MudTd>
        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="@context.Email" Required />
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<div class="d-flex justify-end">
    <MudButton Disabled="false" OnClick="@(() => OpenDialog(_dialogOptions))" Variant="Variant.Filled" Color="Color.Primary" Class="ma-6">Create</MudButton>
</div>


@code {
    [Inject]
    private IApiService apiService { get; set; } = null!;
    [Inject]
    private IMapper mapper { get; set; } = null!;
    [Inject]
    private IDialogService dialogService { get; set; } = null!;

    private DialogOptions _dialogOptions = new DialogOptions { DisableBackdropClick = true };
    private HashSet<AdminVM> _selectedItems = new HashSet<AdminVM>();
    private IEnumerable<AdminVM> _admins = new List<AdminVM>();
    private AdminVM _selectedItem;
    private bool _loader = true;


    protected override async Task OnInitializedAsync()
    {
        _admins = await apiService.GetAdmins();
        _loader = false;
    }

    private async Task UpdateAdmin() 
    {
        await apiService.UpdateAdmin(_selectedItem);
        _admins = await apiService.GetAdmins();
    }

    private async Task ShowDeleteMessageBox(AdminVM admin)
    {
        bool? result = await dialogService.ShowMessageBox("Warning", $"text", cancelText: "Cancel");

        if (result is not null && (bool)result)
        {
            _loader = true;

            var isRemoved = await apiService.DeleteAdmin(admin.Id);

            if (isRemoved)
            {
                _admins = await apiService.GetAdmins();
            }

            _loader = false;
        }

        StateHasChanged();
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var result = await dialogService.Show<CreateAdminDialog>("Create admin", options).Result;

        if (!result.Cancelled)
        { 
            _loader = true;

            var response = await apiService.CreateAdmin((AdminForCreationVM)result.Data);

            if (response)
            {
                _admins = await apiService.GetAdmins();
            }

            _loader = false;
        }
    }
}
