@page "/product"

<MudTable Items="@_products" FixedHeader="true" Hover="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" Class="d-flex flex-grow-1 gap-4"
          OnCommitEditClick="@(async () => await UpdateAdmin())" IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End" Loading="@_loader" @bind-SelectedItem="_selectedItem">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Prices</MudTh>
        <MudTh>Sold</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Prices">
            <MudSimpleTable Dense="@true" Hover="@true" Striped="@true" Style="overflow-x: auto;">
                <thead>
                    <tr>
                        <th>Price</th>
                        <th>Currency</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var price in context.Prices)
                    {
                        <tr>
                            <td>@price.Value</td>
                            <td>@price.Currency?.ISO4217</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudTd>
        <MudTd DataLabel="Sold">@context.Sold</MudTd>
        <MudTd DataLabel="Delete">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="async () => await ShowDeleteMessageBox(context)" Class="ma-2">Delete</MudButton>
        </MudTd>
        <MudTd DataLabel="Edit">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick='() => NavigationManager.NavigateTo($"product/update/{context.Id}")' Class="ma-2">Edit</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>
<div class="d-flex justify-end">
    <MudButton Disabled="false" OnClick='@(() => NavigationManager.NavigateTo("product/create"))' Variant="Variant.Filled" Color="Color.Primary" Class="ma-6">Create</MudButton>
</div>


@code {
    [Inject]
    IApiService ApiService { get; set; } = null!;
    [Inject]
    IMapper Mapper { get; set; } = null!;
    [Inject]
    IDialogService DialogService { get; set; } = null!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    HashSet<ProductVM> _selectedItems = new HashSet<ProductVM>();
    IEnumerable<ProductVM> _products = new List<ProductVM>();
    ProductVM _selectedItem;
    bool _loader = true;


    protected override async Task OnInitializedAsync()
    {
        _products = await ApiService.GetProducts();
        _loader = false;
    }

    private async Task UpdateAdmin()
    {
        await ApiService.UpdateProduct(_selectedItem);
        _products = await ApiService.GetProducts();
    }

    private async Task ShowDeleteMessageBox(ProductVM product)
    {
        bool? result = await DialogService.ShowMessageBox(title: "Warning", message: $"Do you really want delete {product.Name}", cancelText: "Cancel", yesText: "Ok");

        if (result is not null && (bool)result)
        {
            _loader = true;

            var isRemoved = await ApiService.DeleteProduct(product.Id);

            if (isRemoved)
            {
                _products = await ApiService.GetProducts();
            }

            _loader = false;
        }

        StateHasChanged();
    }
}
