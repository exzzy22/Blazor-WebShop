@page "/products"

<MudTable Items="@_products" FixedHeader="true" Hover="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" Class="d-flex flex-grow-1 gap-4"
          OnCommitEditClick="@(async () => await UpdateAdmin())" IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End" Loading="@_loader" @bind-SelectedItem="_selectedItem">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Prices</MudTh>
        <MudTh>Sold</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Prices">@context.Prices</MudTd>
        <MudTd DataLabel="Sold">@context.Sold</MudTd>
        <MudTd DataLabel="Action">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="async () => await ShowDeleteMessageBox(context)" Class="ma-2">Delete</MudButton>
        </MudTd>
    </RowTemplate>
@*    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">
            <MudTextField @bind-Value="@context.FirstName" />
        </MudTd>
        <MudTd DataLabel="LastName">
            <MudTextField @bind-Value="@context.LastName" />
        </MudTd>
        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="@context.Email" Required />
        </MudTd>
    </RowEditingTemplate>*@
</MudTable>
<div class="d-flex justify-end">
    <MudButton Disabled="false" OnClick="@(() => OpenDialog(_dialogOptions))" Variant="Variant.Filled" Color="Color.Primary" Class="ma-6">Create</MudButton>
</div>


@code {
    [Inject]
    private IApiService _apiService { get; set; } = null!;
    [Inject]
    private IMapper _mapper { get; set; } = null!;
    [Inject]
    private IDialogService _dialogService { get; set; } = null!;

    private DialogOptions _dialogOptions = new DialogOptions { DisableBackdropClick = true };
    private HashSet<ProductVM> _selectedItems = new HashSet<ProductVM>();
    private IEnumerable<ProductVM> _products = new List<ProductVM>();
    private ProductVM _selectedItem;
    private bool _loader = true;


    protected override async Task OnInitializedAsync()
    {
        _products = await _apiService.GetProducts();
        _loader = false;
    }

    private async Task UpdateAdmin()
    {
        await _apiService.UpdateProduct(_selectedItem);
        _products = await _apiService.GetProducts();
    }

    private async Task ShowDeleteMessageBox(ProductVM product)
    {
        bool? result = await _dialogService.ShowMessageBox(title: "Warning", message: $"Do you really want delete {product.Name}", cancelText: "Cancel", yesText: "Ok");

        if (result is not null && (bool)result)
        {
            _loader = true;

            var isRemoved = await _apiService.DeleteProduct(product.Id);

            if (isRemoved)
            {
                _products = await _apiService.GetProducts();
            }

            _loader = false;
        }

        StateHasChanged();
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var result = await _dialogService.Show<CreateAdminDialog>("Create admin", options).Result;

        if (!result.Cancelled)
        {
            _loader = true;

            var response = await _apiService.AddProduct((ProductVM)result.Data);

            if (response)
            {
                _products = await _apiService.GetProducts();
            }

            _loader = false;
        }
    }
}
