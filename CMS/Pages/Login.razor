@page "/login"
@layout LoginLayout

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
            <MudGrid Justify="Justify.Center">
                <MudItem xs="6">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Email" Class="mt-3" @bind-Value="Model.Email" For="@(() => Model.Email)"/>
                            <MudTextField Label="Password" Class="mt-3" @bind-Value="Model.Password" For="@(() => Model.Password)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>   
    </MudItem>
</MudGrid>

@code {
    bool _loader = false;

    UserForAuthenticationVM Model = new();

    [Inject]
    IJSRuntime JSRuntime { get; set; } = null!;
    [Inject]
    IApiService ApiService { get; set; } = null!;
    [Inject]
    AuthenticationStateProvider AuthenticationState { get; set; } = null!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    async Task OnValidSubmit()
    {
        _loader = true;
        (bool result, TokenVM? token) = await ApiService.LoginCMS(Model);

        if (result && token is not null)
        {
            await CreateCookie(token.AccessToken, 3);
            var authState = await AuthenticationState.GetAuthenticationStateAsync();
            _loader = false;
            NavigationManager.NavigateTo("/");
        }

        _loader = false;
    }

    async Task CreateCookie(string value, int durationDays)
    {
        await JSRuntime.InvokeAsync<object>("createCookie", "jwtToken", value, durationDays);
    }
}
