@page "/roles"

<MudTable Items="@_roles" FixedHeader="true" Hover="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" Class="d-flex flex-grow-1 gap-4"
          OnCommitEditClick="@(async () => await UpdateRole())" IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End" Loading="@_loader" @bind-SelectedItem="_selectedItem">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Action">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="async () => await ShowDeleteMessageBox(context)" Class="ma-2">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<div class="d-flex justify-end">
    <MudButton Disabled="false" OnClick="@(() => OpenDialog(_dialogOptions))" Variant="Variant.Filled" Color="Color.Primary" Class="ma-6">Create</MudButton>
</div>


@code {
    [Inject]
    private IApiService apiService { get; set; } = null!;
    [Inject]
    private IMapper mapper { get; set; } = null!;
    [Inject]
    private IDialogService dialogService { get; set; } = null!;

    private DialogOptions _dialogOptions = new DialogOptions { DisableBackdropClick = true };
    private HashSet<RoleVM> _selectedItems = new HashSet<RoleVM>();
    private IEnumerable<RoleVM> _roles = new List<RoleVM>();
    private RoleVM _selectedItem = null;
    private bool _loader = true;


    protected override async Task OnInitializedAsync()
    {
        _roles = await apiService.GetRoles();
        _loader = false;
    }

    private async Task UpdateRole() 
    {
        await apiService.UpdateRole(mapper.Map<RoleDto>(_selectedItem));
    }

    private async Task ShowDeleteMessageBox(RoleVM role)
    {
        bool? result = await dialogService.ShowMessageBox("Warning", $"Are you sure you want to delete \"{role.Name}\" role!", yesText: "Delete!", cancelText: "Cancel");

        if (result is not null && (bool)result)
        {
            _loader = true;

            var isRemoved = await apiService.RemoveRole(role.Id);

            if (isRemoved)
            {
                _roles = await apiService.GetRoles();
            }

            _loader = false;
        }

        StateHasChanged();
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var result = await dialogService.Show<CreateRoleDialog>("Custom Options Dialog", options).Result;

        if (!result.Cancelled)
        { 
            _loader = true;

            var response = await apiService.CreateRole(new RoleDto { Name = (string)result.Data });

            if (response)
            {
                _roles = await apiService.GetRoles();
            }

            _loader = false;
        }
    }
}
