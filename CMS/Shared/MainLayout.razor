@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
            <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Never">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">MyApplication</MudText>
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
                @Body
            </MudContainer>
        </MudMainContent>
    </AuthorizeView>
</MudLayout>

@code {
    bool _drawerOpen = true;

    [Inject]
    AuthenticationStateProvider AuthenticationState { get; set; } = null!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState.GetAuthenticationStateAsync();

        if (authState.User is not null && authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        { }
        else
        {
            NavigationManager.NavigateTo("login");   
        }

    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}