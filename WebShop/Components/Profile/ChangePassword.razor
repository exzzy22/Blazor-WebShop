<AuthorizeView Context="AuthorizeContext">
    <EditForm Model="Model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="col-md-4">
            <div class="register">
                <div class="form-group">
                    <label for="OldPassword">Old Password</label>
                    <InputText class="input" name="OldPassword" type="password" @bind-Value="@Model.OldPassword" Placeholder="Old Password" />
                    <ValidationMessage For="() => Model.OldPassword" />
                </div>
                <div class="form-group">
                    <label for="NewPassword">New Password</label>
                    <InputText class="input" name="NewPassword" type="password" @bind-Value="@Model.NewPassword" Placeholder="NewPassword" />
                    <ValidationMessage For="() => Model.NewPassword" />
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="register">
                <div class="form-group">
                    <label for="OldPassword2">Repeat Old Password</label>
                    <InputText class="input" name="OldPassword2" type="password" @bind-Value="@Model.OldPassword2" Placeholder="Repeat Old Password" />
                    <ValidationMessage For="() => Model.OldPassword2" />
                </div>
                <div class="text-center" style="padding-top:2em;justify-content:end;display:flex">
                    <button type="submit" class="primary-btn d-block mx-auto" disabled="@_loader">
                        Save
                        @if (_loader)
                        {
                            <span class="loader"></span>
                        }
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-2"></div>
    </EditForm>
</AuthorizeView>

@code {
    bool _loader = false;

    ChangePasswordVM Model { get; set; } = new();
    [Inject]
    IApiService ApiService { get; set; } = null!;
    [Inject]
    UserState UserState { get; set; } = null!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    async Task OnValidSubmit()
    {
        _loader = true;
        bool result = await ApiService.ChangePassword(Model);
        _loader = false;
    }
}
