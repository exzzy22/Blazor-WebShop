<div class="row">
	<Rating MetaData="(ReviewMetaData)Reviews.MetaData"/>
	<!-- Reviews -->
	<div class="col-md-6">
		<div id="reviews">
			<ul class="reviews">
				@if (Reviews is not null)
				{
					foreach (var review in Reviews.Items)
					{
						<ReviewCard Review="review" />
					}
				}
			</ul>
			@if (Reviews is not null && Reviews.MetaData.TotalPages > 1)
			{
				<ul class="reviews-pagination">
					@if (Reviews.MetaData.HasPrevious)
					{
						<li><a @onclick="async () => await GoToPage(Reviews.MetaData.CurrentPage -1)"><i class="fa fa-angle-left"></i></a></li>
					}
					@foreach (var pageNum in Reviews.GetPagesToShow())
					{
						if (pageNum == Reviews.MetaData.CurrentPage)
						{
							<li class="active">@pageNum</li>
						}
						else
						{
							<li><a @onclick="async () => await GoToPage(pageNum)">@pageNum</a></li>
						}
					}
					@if (Reviews.MetaData.HasNext)
					{
						<li><a @onclick="async () => await GoToPage(Reviews.MetaData.CurrentPage +1)"><i class="fa fa-angle-right"></i></a></li>
					}
				</ul>
			}
		</div>
	</div>
	<!-- /Reviews -->
	<!-- Review Form -->
	<SubmitReview ProductId="ProductId" LoadReviews="async () => await LoadReviews()"/>
	<!-- /Review Form -->
</div>

@code {
	[Parameter]
	public PagedList<ReviewVM> Reviews { get; set; } = null!;
	[Parameter]
	public int ProductId { get; set; }
	[Parameter]
	public EventCallback<PagedList<ReviewVM>> ReviewsChanged { get; set; }
	[Inject]
	IApiService ApiService { get; set; } = null!;

	async Task GoToPage(int pageNumber) => Reviews = await ApiService.GetReviews(new ReviewParameters { PageNumber = pageNumber, PageSize = 3, ProductId = ProductId });

	async Task LoadReviews()
	{
		Reviews = await ApiService.GetReviews(new ReviewParameters { PageNumber = 1, PageSize = 3, ProductId = ProductId });
		await ReviewsChanged.InvokeAsync(Reviews);
	}
}
