@page "/product/{ProductId:int}"
@using System.Reflection;
@using ViewModels.ValidationAttributes;
@implements IDisposable

@if (Product is null) return;

<!-- BREADCRUMB -->
<div id="breadcrumb" class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<div class="col-md-12">
				<ul class="breadcrumb-tree">
					<li><a href="/">Home</a></li>
					<li><a href="products">All Categories</a></li>
					<li><a href="@($"products/{Product.CategoryId}")">@Categories.First(c => c.Id == Product.CategoryId).Name</a></li>
					<li class="active">@Product.ShortName</li>
				</ul>
			</div>
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /BREADCRUMB -->
<!-- SECTION -->
<div class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<!-- Product main img -->
			<div class="col-md-5 col-md-push-2">
				<div id="product-main-img">
					@foreach (var image in Product.Images)
					{
						<div class="product-preview">
							<img src="@(Configuration.ApiImageAddress + image.File)" alt="Product Image">
						</div>
					}
				</div>
			</div>
			<!-- /Product main img -->
			<!-- Product thumb imgs -->
			<div class="col-md-2  col-md-pull-5">
				<div id="product-imgs">
					@foreach (var image in Product.Images)
					{
						<div class="product-preview">
							<img src="@(Configuration.ApiImageAddress + image.File)" alt="Product Image">
						</div>
					}
				</div>
			</div>
			<!-- /Product thumb imgs -->
			<!-- Product details -->
			<div class="col-md-5">
				<div class="product-details">
					<h2 class="product-name">@Product.ShortName</h2>
					<div>
						<StarRating StarCount="(int)Math.Round(((ReviewMetaData)Reviews.MetaData).AverageStarRating())" Type="RatingType.Product" />
						<a class="review-link" style="cursor:pointer;" onclick="focusReviews(event)">@GenerateAddReviewText()</a>
					</div>
					<div>
						<h3 class="product-price">@StaticConfig.Currency.Symbol @Product.GetPrice(StaticConfig.Currency).ToString("N2") <del class="product-old-price">@(Product.IsDiscounted ? GetDicountedPrice(): "")</del></h3>
						<span class="product-available">@(Product.InStock > 1 ? "In Stock" : "Out of Stock")</span>
					</div>
						<p>@Product.Name</p>
					<div class="product-options">
					</div>

					<div class="add-to-cart">
						<div class="qty-label">
							Qty
							<div class="input-number">
								<input type="number" @bind-value="_quantity" disabled>
								<span class="qty-up" @onclick="() => {++_quantity; ValidateQuantity();}">+</span>
								<span class="qty-down" @onclick="() => {--_quantity; ValidateQuantity();}">-</span>
							</div>
						</div>
						<button class="add-to-cart-btn" @onclick="async() => { ValidateQuantity(); await UserState.AddToCart(Product.Id,_quantity);}"><i class="fa fa-shopping-cart"></i> add to cart</button>
					</div>

					<ul class="product-btns">
						<li><a style="cursor:pointer;" @onclick="async () => await UserState.AddRemoveFromWishlist(Product.Id)"><i class="@(UserState.Wishlist.Products.Any(p => p.Id == Product.Id) ? "fa fa-heart" : "fa fa-heart-o")"></i> add to wishlist</a></li>
					</ul>

					<ul class="product-links">
						<li>Category:</li>
						<li><a href="@($"products/{Product.CategoryId}")">@Categories.First(c => c.Id == Product.CategoryId).Name</a></li>
					</ul>

					<ul class="product-links">
						<li>Share:</li>
						<li><a href="#"><i class="fa fa-facebook"></i></a></li>
						<li><a href="#"><i class="fa fa-twitter"></i></a></li>
						<li><a href="#"><i class="fa fa-google-plus"></i></a></li>
						<li><a href="#"><i class="fa fa-envelope"></i></a></li>
					</ul>

				</div>
			</div>
			<!-- /Product details -->
			<!-- Product tab -->
			<div class="col-md-12">
				<div id="product-tab">
					<!-- product tab nav -->
					<ul class="tab-nav">
						<li class="active"><a data-toggle="tab" href="#tab1">Description</a></li>
						<li><a data-toggle="tab" href="#tab2">Details</a></li>
						<li><a data-toggle="tab" href="#tab3" id="reviews-tab">Reviews @(Reviews.MetaData.TotalCount > 0 ? $"({Reviews.MetaData.TotalCount})" : "")</a></li>
					</ul>
					<!-- /product tab nav -->
					<!-- product tab content -->
					<div class="tab-content">
						<!-- tab1  -->
						<div id="tab1" class="tab-pane fade in active">
							<div class="row">
								<div class="col-md-12">
									@if (Product.Description is not null)
									{
										<p>@Product.Description</p>	
									}
								</div>
							</div>
						</div>
						<!-- /tab1  -->
						<!-- tab2  -->
						<div id="tab2" class="tab-pane fade in">
							<ProductDetailsTab Product="Product" />
						</div>
						<!-- /tab2  -->
						<!-- tab3  -->
						<div id="tab3" class="tab-pane fade in">
							<ReviewTab ProductId="ProductId" @bind-Reviews="Reviews" />
						</div>
						<!-- /tab3  -->
					</div>
					<!-- /product tab content  -->
				</div>
			</div>
			<!-- /product tab -->
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /SECTION -->
<RelatedProducts Category="Categories.First(c => c.Id == Product.CategoryId)" ProductId="ProductId" />

@code {
	bool _render = true;
	int _quantity = 1;

	[Parameter]
	public int ProductId { get; set; }
	[Inject]
	IApiService ApiService { get; set; } = null!;
	[Inject]
	WebShopConfiguration Configuration { get; set; } = null!;
	[Inject]
	IJSRuntime JSRuntime { get; set; } = null!;
	[Inject]
	UserState UserState { get; set; } = null!;
	ProductVM Product { get; set; } = null!;
	List<CategoryVM> Categories { get; set; } = null!;
	PagedList<ReviewVM> Reviews { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		StaticConfig.PropertyChanged += OnCurrencyChanged;
		Product = await ApiService.GetProduct(ProductId);
		Categories = await ApiService.GetCategories();
		Reviews = await ApiService.GetReviews(new ReviewParameters { PageNumber = 1, PageSize = 3, ProductId = ProductId });
	}

	private void OnCurrencyChanged(object? sender, PropertyChangedEventArgs e)
	{
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender && _render)
		{
			await JSRuntime.InvokeVoidAsync("detailsSlick");
			_render = false;
		}
	}

	string GetDicountedPrice() => StaticConfig.Currency.Symbol + Product.GetOrginalPrice(StaticConfig.Currency).ToString("N2");

	string GenerateAddReviewText()
	{
		if (Reviews.MetaData.TotalCount > 0)
			return $"{Reviews.MetaData.TotalCount} Review(s) | Add your review";

		return "Add your review";
	}

	void ValidateQuantity()
	{
		if (_quantity < 1)
		{
			_quantity = 1;
			return;
		}

		if (_quantity > Product.InStock)
		{
			_quantity = Product.InStock;
			return;
		}
	}

	void IDisposable.Dispose()
	{
		StaticConfig.PropertyChanged -= OnCurrencyChanged;
	}
}
