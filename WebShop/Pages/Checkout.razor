@page "/checkout"
@implements IDisposable

<!-- BREADCRUMB -->
<div id="breadcrumb" class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<div class="col-md-12">
				<h3 class="breadcrumb-header">Checkout</h3>
				<ul class="breadcrumb-tree">
					<li><a href="#">Home</a></li>
					<li class="active">Checkout</li>
				</ul>
			</div>
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /BREADCRUMB -->
<!-- SECTION -->
<EditForm Model="Model" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
<ObjectGraphDataAnnotationsValidator   />
<div class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<div class="col-md-7">
				<!-- Billing Details -->
					<div class="billing-details">
						<div class="form-group">
							<InputText id="firstName" class="input" @bind-Value="Model.BillingAddress.FirstName" placeholder="First Name" />
							<ValidationMessage For="@(() => Model.BillingAddress.FirstName)" />
						</div>
						<div class="form-group">
							<InputText id="lastName" class="input" @bind-Value="Model.BillingAddress.LastName" placeholder="Last Name" />
							<ValidationMessage For="@(() => Model.BillingAddress.LastName)" />
						</div>
						<div class="form-group">
							<InputText id="email" class="input" @bind-Value="Model.BillingAddress.Email" placeholder="Email" />
							<ValidationMessage For="@(() => Model.BillingAddress.Email)" />
						</div>
						<div class="form-group">
							<InputText id="address" class="input" @bind-Value="Model.BillingAddress.Street" placeholder="Address" />
							<ValidationMessage For="@(() => Model.BillingAddress.Street)" />
						</div>
						<div class="form-group">
							<InputText id="city" class="input" @bind-Value="Model.BillingAddress.City" placeholder="City" />
							<ValidationMessage For="@(() => Model.BillingAddress.City)" />
						</div>
						<div class="form-group">
							<InputText id="country" class="input" @bind-Value="Model.BillingAddress.Country" placeholder="Country" />
							<ValidationMessage For="@(() => Model.BillingAddress.Country)" />
						</div>
						<div class="form-group">
							<InputText id="zipCode" class="input" @bind-Value="Model.BillingAddress.ZipCode" placeholder="ZIP Code" />
							<ValidationMessage For="@(() => Model.BillingAddress.ZipCode)" />
						</div>
						<div class="form-group">
							<InputText id="tel" class="input" @bind-Value="Model.BillingAddress.Tel" placeholder="Telephone" />
							<ValidationMessage For="@(() => Model.BillingAddress.Tel)" />
						</div>
					</div>
				<!-- /Billing Details -->
				<!-- Shiping Details -->
				<div class="shiping-details">
					<div class="section-title">
						<h3 class="title">Shiping address</h3>
					</div>
					<div class="input-checkbox">
						<input type="checkbox" id="shiping-address" @onclick="SetShippingAddress">
						<label for="shiping-address">
							<span></span>
							Ship to a diffrent address?
						</label>
							<div class="caption">
								<div class="form-group">
									<InputText class="input" placeholder="First Name" @bind-Value="Model.ShippingAddress.FirstName" />
									<ValidationMessage For="@(() => Model.ShippingAddress.FirstName)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="Last Name" @bind-Value="Model.ShippingAddress.LastName" />
									<ValidationMessage For="@(() => Model.ShippingAddress.LastName)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="Email" @bind-Value="Model.ShippingAddress.Email" />
									<ValidationMessage For="@(() => Model.ShippingAddress.Email)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="Address" @bind-Value="Model.ShippingAddress.Street" />
									<ValidationMessage For="@(() => Model.ShippingAddress.Street)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="City" @bind-Value="Model.ShippingAddress.City" />
									<ValidationMessage For="@(() => Model.ShippingAddress.City)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="Country" @bind-Value="Model.ShippingAddress.Country" />
									<ValidationMessage For="@(() => Model.ShippingAddress.Country)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="ZIP Code" @bind-Value="Model.ShippingAddress.ZipCode" />
									<ValidationMessage For="@(() => Model.ShippingAddress.ZipCode)" />
								</div>
								<div class="form-group">
									<InputText class="input" placeholder="Telephone" @bind-Value="Model.ShippingAddress.Tel" />
									<ValidationMessage For="@(() => Model.ShippingAddress.Tel)" />
								</div>
							</div>
					</div>
				</div>
				<!-- /Shiping Details -->
				<!-- Order notes -->
				<div class="order-notes">
						<InputTextArea class="input" placeholder="Order Notes" @bind-Value="Model.Note"></InputTextArea>
				</div>
				<!-- /Order notes -->
			</div>

			<!-- Order Details -->
			<div class="col-md-5 order-details">
				<div class="section-title text-center">
					<h3 class="title">Your Order</h3>
				</div>
				<div class="order-summary">
					<div class="order-col">
						<div><strong>PRODUCT</strong></div>
						<div><strong>TOTAL</strong></div>
					</div>
					<div class="order-products">
					@foreach (var product in Cart.Products)
						{
							<div class="order-col">
									<div>@product.Quantity x @product.Product.ShortName</div>
									<div>@StaticConfig.Currency.Symbol @product.Product.GetPrice(StaticConfig.Currency).ToString("N2")</div>
							</div>
						}
					</div>
					<div class="order-col">
						<div>Shiping</div>
						<div><strong>FREE</strong></div>
					</div>
					<div class="order-col">
						<div><strong>TOTAL</strong></div>
							<div><strong class="order-total">@StaticConfig.Currency.Symbol @Cart.GetCartTotal(StaticConfig.Currency).ToString("N2")</strong></div>
					</div>
				</div>
				<div class="input-checkbox">
					<InputCheckbox type="checkbox" id="terms" @bind-Value="Model.TosAccepted" />
					<label for="terms">
						<span></span>
						I've read and accept the <a >terms & conditions</a>
					</label>
						<ValidationMessage For="@(() => Model.TosAccepted)" />
				</div>
					<button type="submit" class="primary-btn order-submit btn-lg btn-block" disabled="@_loader">Place order
						@if (_loader)
						{
							<span class="loader"></span>
						}
					</button>
			</div>
			<!-- /Order Details -->
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /SECTION -->
</EditForm>


@code {
	bool _shipToDifferentAddress = false;
	bool _loader = false;

	OrderForCreationVM Model { get; set; } = new();
	CartVM Cart { get; set; } = new();
	[Inject]
	UserState UserState { get; set; } = null!;
	[Inject]
	IApiService ApiService { get; set; } = null!;
	[Inject]
	NavigationManager NavigationManager { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		StaticConfig.PropertyChanged += OnCurrencyChanged;

		Cart = UserState.Cart;
		if (Cart.Products.Count == 0)
			NavigationManager.NavigateTo("/");

		if (UserState.User is not null)
			LoadAddress();
	}

	private void OnCurrencyChanged(object? sender, PropertyChangedEventArgs e) => StateHasChanged();

	async Task OnValidSubmit()
	{
		_loader = true;
		Model.CartId = Cart.Id;
		Model.CurrencyISO = StaticConfig.Currency.ISO4217;
		string payementUrl = await ApiService.CreatePayment(Model);
		NavigationManager.NavigateTo(payementUrl);
		_loader = false;
	}

	async Task OnInValidSubmit()
	{
		if (UserState.User is not null)
			return;

		var context = new EditContext(Model);
		if (!_shipToDifferentAddress)
			Model.ShippingAddress = Model.BillingAddress;

		if (context.Validate())
			await OnValidSubmit();
	}

	async Task ChangeQuantity(int quantity, int productId)
	{
		if (quantity <= 0)
		{
			await UserState.RemoveFromCart(productId);
			return;
		}

		int quantityToAdd = quantity - Cart.Products.First(p => p.ProductId == productId).Quantity;

		await UserState.AddToCart(productId, quantityToAdd);
	}

	void SetShippingAddress()
	{
		_shipToDifferentAddress = !_shipToDifferentAddress;

		if (_shipToDifferentAddress)
			Model.ShippingAddress = new();
		else
			Model.ShippingAddress = Model.BillingAddress;
	}

	void LoadAddress()
	{
		Model.BillingAddress.FirstName = UserState.User.FirstName;
		Model.BillingAddress.LastName = UserState.User.LastName;
		Model.BillingAddress.Email = UserState.User.Email;
		Model.BillingAddress.Street = UserState.User.Street;
		Model.BillingAddress.City = UserState.User.City;
		Model.BillingAddress.Country = UserState.User.Country;
		Model.BillingAddress.ZipCode = UserState.User.ZipCode;
		Model.BillingAddress.Tel = UserState.User.PhoneNumber;

		Model.ShippingAddress = Model.BillingAddress;
	}

	void IDisposable.Dispose()
	{
		StaticConfig.PropertyChanged -= OnCurrencyChanged;
	}


}
