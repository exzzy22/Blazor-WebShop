@page "/products/{Keywords}/{CategoryId:int?}"
@page "/products/{CategoryId:int?}"
@page "/products"

<!-- BREADCRUMB -->
<div id="breadcrumb" class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<div class="col-md-12">
				<ul class="breadcrumb-tree">
					<li><a href="/">Home</a></li>
					<li><a href="products">All Categories</a></li>
					@if (Keywords is not null)
					{
						<li class="active">@Keywords (@ProductsList.MetaData.TotalCount Results)</li>
					}
				</ul>
			</div>
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /BREADCRUMB -->
<!-- SECTION -->
<div class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<!-- ASIDE -->
			<div id="aside" class="col-md-3">
				<!-- aside Widget -->
				<div class="aside">
					<h3 class="aside-title">Categories</h3>
					<div class="checkbox-filter">
						@if (ProductsList is not null)
						{
							foreach (var kvp in ProductsList.MetaData.CategoryCount)
							{
								<div class="input-checkbox">
									<input type="checkbox" id="category-@kvp.Key" checked="@(ProductParameters.Filter.CategoryId.Contains(kvp.Key))" @onchange="async () => await SetCategory(kvp.Key)">
									<label for="category-@kvp.Key">
										<span></span>
										@Categories.First(c => c.Id == kvp.Key).Name
										<small>(@kvp.Value)</small>
									</label>
								</div>
							}	
						}
					</div>
				</div>
				<!-- /aside Widget -->
				<!-- aside Widget -->
				<div class="aside">
					<h3 class="aside-title">Price</h3>
					<div class="price-filter">
						<div class="input-number price-min">
							<InputNumber id="price-min" type="number" @bind-Value="ProductParameters.Filter.MinPrice" @bind-Value:after="Search"/>
							<span class="qty-up" @onclick="async () => {ProductParameters.Filter.MinPrice++; await Search();}">+</span>
							<span class="qty-down" @onclick="async () => {ProductParameters.Filter.MinPrice--; await Search();}">-</span>
						</div>
						<span>-</span>
						<div class="input-number price-max">
							<InputNumber id="price-max" type="number" @bind-Value="ProductParameters.Filter.MaxPrice" @bind-Value:after="Search" />
							<span class="qty-up" @onclick="async () => {ProductParameters.Filter.MaxPrice++; await Search();}">+</span>
							<span class="qty-down" @onclick="async () => {ProductParameters.Filter.MaxPrice--; await Search();}">-</span>
						</div>
					</div>
				</div>
				<!-- /aside Widget -->
				<!-- aside Widget -->
				<div class="aside">
					<h3 class="aside-title">Brand</h3>
					<div class="checkbox-filter">
					@if (ProductsList is not null)
					{
						foreach (var kvp in ProductsList.MetaData.ManufacturerCount)
						{
							<div class="input-checkbox">
									<input type="checkbox" id="@kvp.Key" @onchange="async () => await SetManufacturer(kvp.Key)">
									<label for="@kvp.Key">
									<span></span>
									@kvp.Key
									<small>(@kvp.Value)</small>
								</label>
							</div>
						}
					}
					</div>
				</div>
				<!-- /aside Widget -->
				<!-- aside Widget -->
				<div class="aside">
					<h3 class="aside-title">Top selling</h3>
					@if (ProductsList is not null)
					{
						foreach (var product in ProductsList.Items.Take(3))
						{
							<ProductWidget Product="product" CategoryName="@Categories.First(c => c.Id == product.CategoryId).Name" />
						}
					}
				</div>
				<!-- /aside Widget -->
			</div>
			<!-- /ASIDE -->
			<!-- STORE -->
			<div id="store" class="col-md-9">
				<!-- store top filter -->
				<div class="store-filter clearfix">
					<div class="store-sort">
						<label>
							Sort By:
							<select class="input-select">
								<option value="0">Popular</option>
								<option value="1">Position</option>
							</select>
						</label>

						<label>
							Show:
							<InputSelect class="input-select" @bind-Value="ProductParameters.PageSize" @bind-Value:after="Search">
								<option value="6">6</option>
								<option value="12">12</option>
								<option value="18">18</option>
							</InputSelect>
						</label>
					</div>
					<ul class="store-grid">
						<li class="active"><i class="fa fa-th"></i></li>
						<li><a><i class="fa fa-th-list"></i></a></li>
					</ul>
				</div>
				<!-- /store top filter -->
				<!-- store products -->
				<div class="row" style="display:contents">
					<!-- product -->
					@if (ProductsList is not null)
					{
						foreach (var product in ProductsList.Items)
						{
							<ProductCard Product="product" CategoryName="@Categories.First(c => c.Id == product.CategoryId).Name" />
						}	
					}
				</div>
				<!-- /store products -->
				@if (ProductsList is not null && ProductsList.MetaData.TotalPages > 1)
				{
					<div class="store-filter clearfix">
						@if (ProductsList.MetaData is not null)
						{
							<span class="store-qty">@ProductsList.MetaData.TotalCount products total</span>
							<ul class="store-pagination" style="cursor:pointer">
								@if (ProductsList.MetaData.HasPrevious)
								{
									<li><a @onclick="async () => await GoToPage(ProductsList.MetaData.CurrentPage -1)"><i class="fa fa-angle-left"></i></a></li>
								}
								@foreach (var pageNum in ProductsList.GetPagesToShow())
								{
									if (pageNum == ProductsList.MetaData.CurrentPage)
									{
										<li class="active">@pageNum</li>
									}
									else
									{
										<li><a @onclick="async () => await GoToPage(pageNum)">@pageNum</a></li>
									}
								}
								@if (ProductsList.MetaData.HasNext)
								{
									<li><a @onclick="async () => await GoToPage(ProductsList.MetaData.CurrentPage +1)"><i class="fa fa-angle-right"></i></a></li>
								}
							</ul>
						}
					</div>
				}
			</div>
			<!-- /STORE -->
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /SECTION -->


@code {
	ProductParameters ProductParameters { get; set; } = new() { PageNumber = 1, PageSize = 12, Filter = new ProductFilter { CurrencyId = StaticConfig.Currency.Id } };
	ProductPagedList<ProductVM> ProductsList { get; set; } = null!;
	List<CategoryVM> Categories { get; set; } = null!;

	[Parameter]
	public string? Keywords { get; set; }
	[Parameter]
	public int? CategoryId { get; set; }
	[Inject]
	IApiService ApiService { get; set; } = null!;

	protected override async Task OnParametersSetAsync()
	{
		ProductParameters.Filter.Keywords = Keywords;
		if (CategoryId is not null)
		{
			ProductParameters.Filter.CategoryId.Add((int)CategoryId);
		}
		else
		{
			ProductParameters.Filter.CategoryId.Clear();	
		}
		ProductsList = await ApiService.GetProducts(ProductParameters);
		Categories = await ApiService.GetCategories();
	}

	async Task GoToPage(int pageNumber)
	{
		ProductParameters.PageNumber = pageNumber;
		ProductsList = await ApiService.GetProducts(ProductParameters);
	}

	async Task Search() => ProductsList = await ApiService.GetProducts(ProductParameters);


	async Task SetCategory(int categoryId)
	{
		if (ProductParameters.Filter.CategoryId.Contains(categoryId))
		{
			ProductParameters.Filter.CategoryId.Remove(categoryId);
		}
		else
		{
			ProductParameters.Filter.CategoryId.Add(categoryId);
		}
		await Search();
	}
	async Task SetManufacturer(string manufacturer)
	{
		if (ProductParameters.Filter.Manufacturer.Contains(manufacturer))
		{
			ProductParameters.Filter.Manufacturer.Remove(manufacturer);
		}
		else
		{
			ProductParameters.Filter.Manufacturer.Add(manufacturer);
		}
		await Search();
	}
}
