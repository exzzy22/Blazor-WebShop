@page "/profile"
@page "/profile/{SectionId:int?}"

<!-- SECTION -->
<div class="section">
    <!-- container -->
    <div class="container">
        <!-- row -->
        <div class="row">
                <div class="col-md-4">
                    <div id="profile-menu" class="list-group">
                        <AuthorizeView>
                        <button @onclick="() => _section = ProfileSections.Details" class="list-group-item list-group-item-action @(_section == ProfileSections.Details ? "active" : null)">Details</button>
                        <button @onclick="() => _section = ProfileSections.ChangePassword" class="list-group-item list-group-item-action @(_section == ProfileSections.ChangePassword ? "active" : null)">Change Password</button>
                        <button @onclick="() => _section = ProfileSections.Orders" class="list-group-item list-group-item-action @(_section == ProfileSections.Orders ? "active" : null)">Orders</button>
                        </AuthorizeView>
                        <button @onclick="() => _section = ProfileSections.Wishlist" class="list-group-item list-group-item-action @(_section == ProfileSections.Wishlist ? "active" : null)">Wishlist</button>
                        <button @onclick="() => _section = ProfileSections.Cart" class="list-group-item list-group-item-action @(_section == ProfileSections.Cart ? "active" : null)">Cart</button>
                        <AuthorizeView>
                        <button class="list-group-item list-group-item-action" @onclick="async () => await LogOut()">Logout</button>
                        </AuthorizeView>
                    </div>
                </div>
                @switch (_section)
                {
                    case ProfileSections.Details:
                    <Details/> 
                        break;
                    case ProfileSections.Wishlist:
                    <Wishlist />
                        break;
                    case ProfileSections.ChangePassword:
                    <ChangePassword />
                    break;
                    case ProfileSections.Cart:
                    <CartPage />
                    break;
                    case ProfileSections.Orders:
                    <OrdersPage />
                    break;
            }
        </div>
        <!-- /row -->
    </div>
    <!-- /container -->
</div>

@code {
    ProfileSections _section = ProfileSections.Details;

    [Parameter]
    public int? SectionId { get; set; }
    [Inject]
    AuthenticationStateProvider AuthenticationState { get; set; } = null!;
    [Inject]
    IJSRuntime JSRuntime { get; set; } = null!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (SectionId is not null)
            _section = (ProfileSections)SectionId;
    }

    async Task LogOut()
    {
        await DeleteCookie();
        var authState = await AuthenticationState.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }

    async Task DeleteCookie() => await JSRuntime.InvokeVoidAsync("deleteCookie", "jwtToken");
}
