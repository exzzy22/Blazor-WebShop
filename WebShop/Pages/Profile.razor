@page "/profile"

<!-- SECTION -->
<div class="section">
    <!-- container -->
    <div class="container">
        <!-- row -->
        <div class="row">
                <div class="col-md-4">
                    <div id="profile-menu" class="list-group">
                        <button @onclick="() => Section = ProfileSections.Details" class="list-group-item list-group-item-action @(Section == ProfileSections.Details ? "active" : null)">Details</button>
                        <button @onclick="() => Section = ProfileSections.ChangePassword" class="list-group-item list-group-item-action @(Section == ProfileSections.ChangePassword ? "active" : null)">Change Password</button>
                        <button @onclick="() => Section = ProfileSections.Orders" class="list-group-item list-group-item-action">Item 1</button>
                        <button class="list-group-item list-group-item-action" @onclick="async () => await LogOut()">Logout</button>
                    </div>
                </div>
                @switch (Section)
                {
                    case ProfileSections.Details:
                    <Details/> break;
                }
        </div>
        <!-- /row -->
    </div>
    <!-- /container -->
</div>

@code {
    ProfileSections Section = ProfileSections.Details;

    [Inject]
    AuthenticationStateProvider AuthenticationState { get; set; } = null!;
    [Inject]
    IJSRuntime JSRuntime { get; set; } = null!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    async Task LogOut()
    {
        await DeleteCookie();
        var authState = await AuthenticationState.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }

    async Task DeleteCookie()
    {
        await JSRuntime.InvokeVoidAsync("deleteCookie", "jwtToken");
    }
}
